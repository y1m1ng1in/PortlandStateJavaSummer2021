package edu.pdx.cs410J.yl6;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** 
 * TimeStringValidator is the class that encapsulate the computation of validation
 * of a given string <code>s</code> that represents time. 
 * <p>
 * Given a string <code>s</code>, match it with time format hh:mm, where
 * hh and mm can be either 1 digit or 2 digit, each field must be delimited by ":". 
 * <p>
 * If the string does not match the above pattern, the class method <code>isValid</code> 
 * returns <code>false</code> with setting <code>message</code> field indicates format error.
 * If the hh or mm field does not live in the range 0 - 23, 0 - 59, respectively, 
 * then <code>isValid</code> returns <code>false</code> with setting <code>message</code> 
 * field indicates value out-of-range error.   
 */
public class TimeStringValidator extends AbstractValidator {
  
  static final int MAX_HOUR = 23;
  static final int MAX_MINUTE = 59;
  static final String pattern = "([0-9]{1,2}):([0-9]{1,2})";
  private String message;

  /**
   * Check if input string <code>s</code> matches pattern hh:mm, and hour and minute field
   * are in valid range. 
   * 
   * @param s a string to match with <code>pattern</code>, hh:mm.
   * @return  <code>true</code> if the string <code>s</code> successfully match above pattern
   *          and hour and minute are in valid range 0 - 23, 0 - 59, respectively. 
   *          <code>false</code> otherwise
   */
  @Override
  public boolean isValid(String s) {
    Pattern r = Pattern.compile(pattern);
    Matcher m = r.matcher(s);
    
    if (!m.matches()) {
      this.message = "time " + s + " format does not meet requirement";
      return false;
    }

    int hour = Integer.parseInt(m.group(1));
    int minute = Integer.parseInt(m.group(2));
    if (hour > MAX_HOUR) {
      this.message = hour + " is not a valid hour";
      return false;
    }
    if (minute > MAX_MINUTE) {
      this.message = minute + " is not a valid minute";
      return false;
    }

    return true;
  }

  /**
   * Return error message generated by last <code>isValid</code> call.
   * 
   * @return error message computed during last <code>isValid</code> call.
   */
  @Override
  public String getErrorMessage() {
    return this.message;
  }
}
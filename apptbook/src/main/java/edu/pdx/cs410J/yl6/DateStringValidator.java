package edu.pdx.cs410J.yl6;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** 
 * DateStringValidator is the class that encapsulate the computation of validation
 * of a given string <code>s</code> that represents date. 
 * <p>
 * Given a string <code>s</code>, match it with date format mm/dd/yyyy, where
 * mm and dd can be either 1 digit or 2 digit, yyyy must be 4 digit, each field
 * must be delimited by "/". 
 * <p>
 * If the string does not match the above pattern, the class method <code>isValid</code> 
 * returns <code>false</code> with setting <code>message</code> field indicates format error.
 * If the mm or dd field does not live in the range 1 - 12, 1 - 31, respectively, 
 * then <code>isValid</code> returns <code>false</code> with setting <code>message</code> 
 * field indicates value out-of-range error.   
 */
public class DateStringValidator extends AbstractValidator {
  static final int MAX_MONTH = 12;
  static final int MAX_DAY = 31;
  static final String pattern = "([0-9]{1,2})/([0-9]{1,2})/([0-9]{4})";
  private String message;

  /**
   * Check if input string <code>s</code> matches pattern mm/dd/yyyy, and month and day
   * field are in valid range. 
   * 
   * @param s a string to match with <code>pattern</code>, mm/dd/yyyy.
   * @return  <code>true</code> if the string <code>s</code> successfully match above pattern
   *          and month and day are in valid range 1 - 12, 1 - 31, respectively. 
   *          <code>false</code> otherwise
   */
  @Override
  public boolean isValid(String s) {
    Pattern r = Pattern.compile(pattern);
    Matcher m = r.matcher(s);
    
    if (!m.matches()) {
      this.message = "date " + s + " format does not meet requirement";
      return false;
    }
    
    int month = Integer.parseInt(m.group(1));
    int day = Integer.parseInt(m.group(2));
    if (month > MAX_MONTH) {
      this.message = month + " is not a valid month";
      return false;
    }
    if (day > MAX_DAY) {
      this.message = day + " is not a valid day";
      return false;
    }

    return true;
  }

  /**
   * Return error message generated by last <code>isValid</code> call.
   * 
   * @return error message computed during last <code>isValid</code> call.
   */
  @Override
  public String getErrorMessage() {
    return this.message;
  }
}